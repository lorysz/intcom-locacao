// <auto-generated />
using System;
using Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infra.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20200522223418_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Infra.Entities.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCliente");

                    b.ToTable("tb_cliente");

                    b.HasData(
                        new
                        {
                            IdCliente = 1,
                            Email = "cecilialuziadrumond@oticascarol.com.br",
                            Nome = "Cecília Luzia Drumond",
                            Telefone = "(95)98476-3855"
                        },
                        new
                        {
                            IdCliente = 2,
                            Email = "gabriellygabrielalima_@mirafactoring.com.br",
                            Nome = "Gabrielly Gabriela Lima",
                            Telefone = "(95)98697-4886"
                        },
                        new
                        {
                            IdCliente = 3,
                            Email = "kaiquemarcos@oticascarol.com.br",
                            Nome = "Kaique Marcos Gonçalves",
                            Telefone = "(95)98242-7258"
                        },
                        new
                        {
                            IdCliente = 4,
                            Email = "louisecatarina@oticascarol.com.br",
                            Nome = "Louise Catarina",
                            Telefone = "(95)99757-0501"
                        },
                        new
                        {
                            IdCliente = 5,
                            Email = "hugotiagosilva_@oticascarol.com.br",
                            Nome = "Hugo Tiago Silva",
                            Telefone = "(95)98214-0378"
                        });
                });

            modelBuilder.Entity("Infra.Entities.Filme", b =>
                {
                    b.Property<int>("Idfilme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Idfilme");

                    b.ToTable("tb_filme");

                    b.HasData(
                        new
                        {
                            Idfilme = 1,
                            Nome = "A Casa Monstro"
                        },
                        new
                        {
                            Idfilme = 2,
                            Nome = "Dois Caras Legais"
                        },
                        new
                        {
                            Idfilme = 3,
                            Nome = "Entrando Numa Fria"
                        },
                        new
                        {
                            Idfilme = 4,
                            Nome = "O Lobo de Wall Street"
                        },
                        new
                        {
                            Idfilme = 5,
                            Nome = "O Poderoso Chefão"
                        },
                        new
                        {
                            Idfilme = 6,
                            Nome = "De Volta Para o Futuro"
                        });
                });

            modelBuilder.Entity("Infra.Entities.Locacao", b =>
                {
                    b.Property<int>("IdLocacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataDevolucao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataLocacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdFilme")
                        .HasColumnType("int");

                    b.HasKey("IdLocacao");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdFilme");

                    b.ToTable("tb_locacao");
                });

            modelBuilder.Entity("Infra.Entities.Locacao", b =>
                {
                    b.HasOne("Infra.Entities.Cliente", "Cliente")
                        .WithMany("Locacoes")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infra.Entities.Filme", "Filme")
                        .WithMany("Locacoes")
                        .HasForeignKey("IdFilme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
